class Pila:
    def __init__ (self):
        self.pila = []
    def obtener (self):
        return self.pila.pop ()
    def meter (self, e):
        self.pila.append (e)
        return len (self.pila)
    @property
    def longitud (self):
        return len (self.pila)

class Grafo:

    def __init__(self):
        self.V = set()
        self.E = dict()
        self.vecinos = dict()

    def agrega(self,v):
        self.V.add(v)
        if not v in self.vecinos:
            self.vecinos[v] = set()
    def conecta(self, v, u, peso = 1):
        self.agrega(v)
        self.agrega(u)
        self.E[(v, u)] = self.E[(u, v)] = peso
        self.vecinos[v].add(u)
        self.vecinos[u].add(v)

    def complemento(self):
        comp= Grafo()
        for v in self.V:
            for w in self.V:
                if v != w and (v, w) not in self.E:
                    comp.conecta(v, w, 1)
                

def DFS(grafo,ni):
        visitados=[ni]
        p=Pila()
        p.meter(ni)
        while (p.longitud>0):
            na=p.obtener()
            visitados.append(na)
            ln= grafo.vecinos[na]
            for nodo in ln:
                if nodo not in visitados:
                    p.meter(nodo)

        return visitados

prueba=Grafo()
prueba.conecta(1,2)
prueba.conecta(1,3)
prueba.conecta(3,5)
prueba.conecta(1,4)
prueba.conecta(4,6)
print(DFS(prueba,1))
